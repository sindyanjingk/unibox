generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String
  fullName        String
  phone           String?
  password        String
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  role            String    @default("user") // "admin", "owner", "user"

  ownedTenants     Tenant[] @relation("OwnedTenants")         // sebagai pemilik tenant
  memberOfTenants  Tenant[] @relation("TenantUsers")          // sebagai user dalam tenant

  accounts         Account[]
  sessions         Session[]
  orders           Order[]

  @@unique([email])
  @@map("users")
}

model Tenant {
  id             String     @id @default(cuid())
  slug           String     @unique
  name           String
  description    String?
  logo           String?
  email          String?
  phone          String?
  whatsapp       String?
  address        String?
  isActive       Boolean    @default(true)
  verified       Boolean    @default(false)
  primaryColor   String     @default("#6366f1")
  secondaryColor String     @default("#8b5cf6")
  joinedAt       DateTime   @default(now())
  totalOrders    Int        @default(0)
  totalRevenue   Decimal    @default(0.00) @db.Decimal(12, 2)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  ownerId        String
  owner          User       @relation("OwnedTenants", fields: [ownerId], references: [id], onDelete: Cascade)

  users          User[]     @relation("TenantUsers")

  categories     Category[]
  orders         Order[]
  products       Product[]

  @@map("tenants")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String?
  icon        String?
  tenantId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([slug, tenantId])
  @@index([tenantId])
  @@map("categories")
}

model Product {
  id            String    @id @default(cuid())
  name          String
  slug          String
  description   String?
  image         String?
  price         Decimal   @db.Decimal(10, 2)
  originalPrice Decimal?  @db.Decimal(10, 2)
  cost          Decimal   @db.Decimal(10, 2)
  sku           String?
  isActive      Boolean   @default(true)
  isDigital     Boolean   @default(true)
  sold          Int       @default(0)
  rating        Decimal   @default(0.0) @db.Decimal(2, 1)
  reviewCount   Int       @default(0)
  provider      String?
  providerCode  String?
  categoryId    String
  tenantId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  category      Category  @relation(fields: [categoryId], references: [id])
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  @@unique([slug, tenantId])
  @@index([tenantId])
  @@map("products")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  customerName    String
  customerEmail   String
  customerPhone   String?
  subtotal        Decimal       @db.Decimal(10, 2)
  fee             Decimal       @default(0.00) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  profit          Decimal       @default(0.00) @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  providerOrderId String?
  providerStatus  String?
  notes           String?
  adminNotes      String?
  userId          String?
  tenantId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?         @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]

  @@index([tenantId])
  @@map("orders")
}

model OrderItem {
  id          String          @id @default(cuid())
  productName String
  productSku  String?
  price       Decimal         @db.Decimal(10, 2)
  cost        Decimal         @db.Decimal(10, 2)
  quantity    Int             @default(1)
  targetId    String?
  targetData  String?
  status      OrderItemStatus @default(PENDING)
  productId   String
  orderId     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())

  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderItemStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
